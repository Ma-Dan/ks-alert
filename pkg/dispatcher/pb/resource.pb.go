// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// resource group
type ResourceGroup struct {
	ResourceGroupId   string            `protobuf:"bytes,1,opt,name=resource_group_id" json:"resource_group_id,omitempty"`
	ResourceGroupName string            `protobuf:"bytes,2,opt,name=resource_group_name" json:"resource_group_name,omitempty"`
	ResourceUriTmpls  *ResourceUriTmpls `protobuf:"bytes,3,opt,name=resource_uri_tmpls" json:"resource_uri_tmpls,omitempty"`
	Desc              string            `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
	Resources         []*Resource       `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty"`
}

func (m *ResourceGroup) Reset()                    { *m = ResourceGroup{} }
func (m *ResourceGroup) String() string            { return proto.CompactTextString(m) }
func (*ResourceGroup) ProtoMessage()               {}
func (*ResourceGroup) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *ResourceGroup) GetResourceGroupId() string {
	if m != nil {
		return m.ResourceGroupId
	}
	return ""
}

func (m *ResourceGroup) GetResourceGroupName() string {
	if m != nil {
		return m.ResourceGroupName
	}
	return ""
}

func (m *ResourceGroup) GetResourceUriTmpls() *ResourceUriTmpls {
	if m != nil {
		return m.ResourceUriTmpls
	}
	return nil
}

func (m *ResourceGroup) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ResourceGroup) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type ResourceGroupSpec struct {
	ResourceGroupId string `protobuf:"bytes,1,opt,name=resource_group_id" json:"resource_group_id,omitempty"`
}

func (m *ResourceGroupSpec) Reset()                    { *m = ResourceGroupSpec{} }
func (m *ResourceGroupSpec) String() string            { return proto.CompactTextString(m) }
func (*ResourceGroupSpec) ProtoMessage()               {}
func (*ResourceGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *ResourceGroupSpec) GetResourceGroupId() string {
	if m != nil {
		return m.ResourceGroupId
	}
	return ""
}

type Resource struct {
	ResourceId      string `protobuf:"bytes,1,opt,name=resource_id" json:"resource_id,omitempty"`
	ResourceName    string `protobuf:"bytes,2,opt,name=resource_name" json:"resource_name,omitempty"`
	ResourceGroupId string `protobuf:"bytes,3,opt,name=resource_group_id" json:"resource_group_id,omitempty"`
	ResourceTypeId  string `protobuf:"bytes,4,opt,name=resource_type_id" json:"resource_type_id,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *Resource) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *Resource) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *Resource) GetResourceGroupId() string {
	if m != nil {
		return m.ResourceGroupId
	}
	return ""
}

func (m *Resource) GetResourceTypeId() string {
	if m != nil {
		return m.ResourceTypeId
	}
	return ""
}

type ResourceGroupResponse struct {
	ResourceGroup *ResourceGroup `protobuf:"bytes,1,opt,name=resource_group" json:"resource_group,omitempty"`
	Error         *Error         `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ResourceGroupResponse) Reset()                    { *m = ResourceGroupResponse{} }
func (m *ResourceGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ResourceGroupResponse) ProtoMessage()               {}
func (*ResourceGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *ResourceGroupResponse) GetResourceGroup() *ResourceGroup {
	if m != nil {
		return m.ResourceGroup
	}
	return nil
}

func (m *ResourceGroupResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceGroup)(nil), "pb.ResourceGroup")
	proto.RegisterType((*ResourceGroupSpec)(nil), "pb.ResourceGroupSpec")
	proto.RegisterType((*Resource)(nil), "pb.Resource")
	proto.RegisterType((*ResourceGroupResponse)(nil), "pb.ResourceGroupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ResourceHandler service

type ResourceHandlerClient interface {
	// resource
	CreateResource(ctx context.Context, in *ResourceGroup, opts ...grpc.CallOption) (*ResourceGroupResponse, error)
	GetResource(ctx context.Context, in *ResourceGroupSpec, opts ...grpc.CallOption) (*ResourceGroupResponse, error)
	UpdateResource(ctx context.Context, in *ResourceGroup, opts ...grpc.CallOption) (*ResourceGroupResponse, error)
	DeleteResource(ctx context.Context, in *ResourceGroupSpec, opts ...grpc.CallOption) (*ResourceGroupResponse, error)
}

type resourceHandlerClient struct {
	cc *grpc.ClientConn
}

func NewResourceHandlerClient(cc *grpc.ClientConn) ResourceHandlerClient {
	return &resourceHandlerClient{cc}
}

func (c *resourceHandlerClient) CreateResource(ctx context.Context, in *ResourceGroup, opts ...grpc.CallOption) (*ResourceGroupResponse, error) {
	out := new(ResourceGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ResourceHandler/CreateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceHandlerClient) GetResource(ctx context.Context, in *ResourceGroupSpec, opts ...grpc.CallOption) (*ResourceGroupResponse, error) {
	out := new(ResourceGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ResourceHandler/GetResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceHandlerClient) UpdateResource(ctx context.Context, in *ResourceGroup, opts ...grpc.CallOption) (*ResourceGroupResponse, error) {
	out := new(ResourceGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ResourceHandler/UpdateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceHandlerClient) DeleteResource(ctx context.Context, in *ResourceGroupSpec, opts ...grpc.CallOption) (*ResourceGroupResponse, error) {
	out := new(ResourceGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ResourceHandler/DeleteResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceHandler service

type ResourceHandlerServer interface {
	// resource
	CreateResource(context.Context, *ResourceGroup) (*ResourceGroupResponse, error)
	GetResource(context.Context, *ResourceGroupSpec) (*ResourceGroupResponse, error)
	UpdateResource(context.Context, *ResourceGroup) (*ResourceGroupResponse, error)
	DeleteResource(context.Context, *ResourceGroupSpec) (*ResourceGroupResponse, error)
}

func RegisterResourceHandlerServer(s *grpc.Server, srv ResourceHandlerServer) {
	s.RegisterService(&_ResourceHandler_serviceDesc, srv)
}

func _ResourceHandler_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceHandlerServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ResourceHandler/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceHandlerServer).CreateResource(ctx, req.(*ResourceGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceHandler_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceHandlerServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ResourceHandler/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceHandlerServer).GetResource(ctx, req.(*ResourceGroupSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceHandler_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceHandlerServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ResourceHandler/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceHandlerServer).UpdateResource(ctx, req.(*ResourceGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceHandler_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceHandlerServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ResourceHandler/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceHandlerServer).DeleteResource(ctx, req.(*ResourceGroupSpec))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ResourceHandler",
	HandlerType: (*ResourceHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _ResourceHandler_CreateResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ResourceHandler_GetResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ResourceHandler_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ResourceHandler_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource.proto",
}

func init() { proto.RegisterFile("resource.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0xb5, 0x05, 0x8c, 0xcc, 0x42, 0x95, 0xc5, 0x26, 0x0b, 0x1e, 0x24, 0x3d, 0xe1, 0xa5, 0x31,
	0xf5, 0x07, 0x50, 0x31, 0x78, 0x46, 0xb9, 0x18, 0x13, 0x42, 0xe9, 0xc4, 0x34, 0x02, 0xdd, 0x4c,
	0xdb, 0x83, 0x3f, 0xe3, 0xd9, 0xcf, 0x34, 0xdd, 0xba, 0x6b, 0x11, 0xc3, 0x41, 0xaf, 0xef, 0xbd,
	0x79, 0xf3, 0xde, 0xce, 0x82, 0x43, 0x98, 0x26, 0x39, 0x2d, 0xd1, 0x97, 0x94, 0x64, 0x09, 0xb7,
	0x65, 0xd8, 0x67, 0x48, 0x94, 0x50, 0x09, 0xf4, 0x5d, 0x2d, 0xc8, 0x29, 0xce, 0xd6, 0x72, 0x55,
	0xc2, 0xde, 0x87, 0x05, 0xed, 0xe9, 0x17, 0x33, 0xa1, 0x24, 0x97, 0xbc, 0x07, 0x1d, 0x2d, 0x9d,
	0xbf, 0x14, 0xc8, 0x3c, 0x8e, 0x84, 0x35, 0xb0, 0x86, 0x4d, 0x7e, 0x06, 0xdd, 0x1f, 0xd4, 0x66,
	0xb1, 0x46, 0x61, 0x2b, 0xf2, 0x12, 0xb8, 0x21, 0x73, 0x8a, 0xe7, 0xc5, 0x92, 0x54, 0xd4, 0x06,
	0xd6, 0x90, 0x05, 0xa7, 0xbe, 0x0c, 0x7d, 0xbd, 0x66, 0x46, 0xf1, 0x63, 0xc1, 0xf1, 0x16, 0xd4,
	0x23, 0x4c, 0x97, 0xa2, 0xae, 0xe6, 0xcf, 0xa1, 0xa9, 0xe7, 0x53, 0xd1, 0x18, 0xd4, 0x86, 0x2c,
	0x68, 0x55, 0xc7, 0x3c, 0x1f, 0x3a, 0x5b, 0x49, 0x1f, 0x24, 0x2e, 0xf7, 0xa4, 0xf5, 0x5e, 0xe1,
	0x48, 0xeb, 0x79, 0x17, 0x98, 0x91, 0x99, 0x3a, 0x2e, 0xb4, 0x0d, 0x58, 0x29, 0xf2, 0xab, 0x65,
	0x4d, 0x51, 0x02, 0x4e, 0x0c, 0x95, 0xbd, 0x49, 0xe5, 0xa5, 0xd2, 0x7b, 0xcf, 0xe0, 0x6e, 0x85,
	0x9b, 0x62, 0x2a, 0x93, 0x4d, 0x8a, 0xfc, 0xe2, 0xfb, 0x34, 0xa5, 0x9b, 0x5a, 0xce, 0x82, 0x4e,
	0xb5, 0x5b, 0xf9, 0xf2, 0x02, 0x1a, 0xea, 0x62, 0x2a, 0x07, 0x0b, 0x9a, 0x85, 0xe2, 0xae, 0x00,
	0x82, 0x77, 0x1b, 0x8e, 0xb5, 0xf6, 0x7e, 0xb1, 0x89, 0x56, 0x48, 0x7c, 0x04, 0xce, 0x2d, 0xe1,
	0x22, 0x43, 0x53, 0x72, 0xd7, 0xb2, 0xdf, 0xdb, 0x81, 0x74, 0x30, 0xef, 0x80, 0x5f, 0x03, 0x9b,
	0x60, 0x66, 0xc6, 0xdd, 0x1d, 0x6d, 0xf1, 0xc2, 0xfb, 0x2d, 0x46, 0xe0, 0xcc, 0x64, 0xf4, 0x9f,
	0x10, 0x63, 0x70, 0xc6, 0xb8, 0xc2, 0x8a, 0xc3, 0x1f, 0x72, 0xdc, 0xd4, 0x9f, 0x6c, 0x19, 0x86,
	0x87, 0xea, 0x4f, 0x5f, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xfe, 0x37, 0x5c, 0x0d, 0x03,
	0x00, 0x00,
}
