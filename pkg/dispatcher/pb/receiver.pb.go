// Code generated by protoc-gen-go. DO NOT EDIT.
// source: receiver.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// receiver group
type ReceiverGroup struct {
	ReceiverGroupId   string      `protobuf:"bytes,1,opt,name=receiver_group_id" json:"receiver_group_id,omitempty"`
	ReceiverGroupName string      `protobuf:"bytes,2,opt,name=receiver_group_name" json:"receiver_group_name,omitempty"`
	Webhook           string      `protobuf:"bytes,3,opt,name=webhook" json:"webhook,omitempty"`
	WebhookEnable     bool        `protobuf:"varint,4,opt,name=webhook_enable" json:"webhook_enable,omitempty"`
	Desc              string      `protobuf:"bytes,5,opt,name=desc" json:"desc,omitempty"`
	Receivers         []*Receiver `protobuf:"bytes,6,rep,name=receivers" json:"receivers,omitempty"`
}

func (m *ReceiverGroup) Reset()                    { *m = ReceiverGroup{} }
func (m *ReceiverGroup) String() string            { return proto.CompactTextString(m) }
func (*ReceiverGroup) ProtoMessage()               {}
func (*ReceiverGroup) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *ReceiverGroup) GetReceiverGroupId() string {
	if m != nil {
		return m.ReceiverGroupId
	}
	return ""
}

func (m *ReceiverGroup) GetReceiverGroupName() string {
	if m != nil {
		return m.ReceiverGroupName
	}
	return ""
}

func (m *ReceiverGroup) GetWebhook() string {
	if m != nil {
		return m.Webhook
	}
	return ""
}

func (m *ReceiverGroup) GetWebhookEnable() bool {
	if m != nil {
		return m.WebhookEnable
	}
	return false
}

func (m *ReceiverGroup) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ReceiverGroup) GetReceivers() []*Receiver {
	if m != nil {
		return m.Receivers
	}
	return nil
}

type Receiver struct {
	ReceiverId   string `protobuf:"bytes,1,opt,name=receiver_id" json:"receiver_id,omitempty"`
	ReceiverName string `protobuf:"bytes,2,opt,name=receiver_name" json:"receiver_name,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone        string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Wechat       string `protobuf:"bytes,5,opt,name=wechat" json:"wechat,omitempty"`
}

func (m *Receiver) Reset()                    { *m = Receiver{} }
func (m *Receiver) String() string            { return proto.CompactTextString(m) }
func (*Receiver) ProtoMessage()               {}
func (*Receiver) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Receiver) GetReceiverId() string {
	if m != nil {
		return m.ReceiverId
	}
	return ""
}

func (m *Receiver) GetReceiverName() string {
	if m != nil {
		return m.ReceiverName
	}
	return ""
}

func (m *Receiver) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Receiver) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Receiver) GetWechat() string {
	if m != nil {
		return m.Wechat
	}
	return ""
}

type ReceiverGroupSpec struct {
	ReceiverGroupId string `protobuf:"bytes,1,opt,name=receiver_group_id" json:"receiver_group_id,omitempty"`
	ReceiverId      string `protobuf:"bytes,2,opt,name=receiver_id" json:"receiver_id,omitempty"`
}

func (m *ReceiverGroupSpec) Reset()                    { *m = ReceiverGroupSpec{} }
func (m *ReceiverGroupSpec) String() string            { return proto.CompactTextString(m) }
func (*ReceiverGroupSpec) ProtoMessage()               {}
func (*ReceiverGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ReceiverGroupSpec) GetReceiverGroupId() string {
	if m != nil {
		return m.ReceiverGroupId
	}
	return ""
}

func (m *ReceiverGroupSpec) GetReceiverId() string {
	if m != nil {
		return m.ReceiverId
	}
	return ""
}

type ReceiverGroupResponse struct {
	ReceiverGroup *ReceiverGroup `protobuf:"bytes,1,opt,name=receiver_group" json:"receiver_group,omitempty"`
	Error         *Error         `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ReceiverGroupResponse) Reset()                    { *m = ReceiverGroupResponse{} }
func (m *ReceiverGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ReceiverGroupResponse) ProtoMessage()               {}
func (*ReceiverGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *ReceiverGroupResponse) GetReceiverGroup() *ReceiverGroup {
	if m != nil {
		return m.ReceiverGroup
	}
	return nil
}

func (m *ReceiverGroupResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*ReceiverGroup)(nil), "pb.ReceiverGroup")
	proto.RegisterType((*Receiver)(nil), "pb.Receiver")
	proto.RegisterType((*ReceiverGroupSpec)(nil), "pb.ReceiverGroupSpec")
	proto.RegisterType((*ReceiverGroupResponse)(nil), "pb.ReceiverGroupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ReceiverHandler service

type ReceiverHandlerClient interface {
	// Receiver
	CreateReceiver(ctx context.Context, in *ReceiverGroup, opts ...grpc.CallOption) (*ReceiverGroupResponse, error)
	GetReceiver(ctx context.Context, in *ReceiverGroupSpec, opts ...grpc.CallOption) (*ReceiverGroupResponse, error)
	UpdateReceiver(ctx context.Context, in *ReceiverGroup, opts ...grpc.CallOption) (*ReceiverGroupResponse, error)
	DeleteReceiver(ctx context.Context, in *ReceiverGroupSpec, opts ...grpc.CallOption) (*ReceiverGroupResponse, error)
}

type receiverHandlerClient struct {
	cc *grpc.ClientConn
}

func NewReceiverHandlerClient(cc *grpc.ClientConn) ReceiverHandlerClient {
	return &receiverHandlerClient{cc}
}

func (c *receiverHandlerClient) CreateReceiver(ctx context.Context, in *ReceiverGroup, opts ...grpc.CallOption) (*ReceiverGroupResponse, error) {
	out := new(ReceiverGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ReceiverHandler/CreateReceiver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverHandlerClient) GetReceiver(ctx context.Context, in *ReceiverGroupSpec, opts ...grpc.CallOption) (*ReceiverGroupResponse, error) {
	out := new(ReceiverGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ReceiverHandler/GetReceiver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverHandlerClient) UpdateReceiver(ctx context.Context, in *ReceiverGroup, opts ...grpc.CallOption) (*ReceiverGroupResponse, error) {
	out := new(ReceiverGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ReceiverHandler/UpdateReceiver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverHandlerClient) DeleteReceiver(ctx context.Context, in *ReceiverGroupSpec, opts ...grpc.CallOption) (*ReceiverGroupResponse, error) {
	out := new(ReceiverGroupResponse)
	err := grpc.Invoke(ctx, "/pb.ReceiverHandler/DeleteReceiver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReceiverHandler service

type ReceiverHandlerServer interface {
	// Receiver
	CreateReceiver(context.Context, *ReceiverGroup) (*ReceiverGroupResponse, error)
	GetReceiver(context.Context, *ReceiverGroupSpec) (*ReceiverGroupResponse, error)
	UpdateReceiver(context.Context, *ReceiverGroup) (*ReceiverGroupResponse, error)
	DeleteReceiver(context.Context, *ReceiverGroupSpec) (*ReceiverGroupResponse, error)
}

func RegisterReceiverHandlerServer(s *grpc.Server, srv ReceiverHandlerServer) {
	s.RegisterService(&_ReceiverHandler_serviceDesc, srv)
}

func _ReceiverHandler_CreateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverHandlerServer).CreateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReceiverHandler/CreateReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverHandlerServer).CreateReceiver(ctx, req.(*ReceiverGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverHandler_GetReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverGroupSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverHandlerServer).GetReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReceiverHandler/GetReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverHandlerServer).GetReceiver(ctx, req.(*ReceiverGroupSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverHandler_UpdateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverHandlerServer).UpdateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReceiverHandler/UpdateReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverHandlerServer).UpdateReceiver(ctx, req.(*ReceiverGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverHandler_DeleteReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverGroupSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverHandlerServer).DeleteReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReceiverHandler/DeleteReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverHandlerServer).DeleteReceiver(ctx, req.(*ReceiverGroupSpec))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReceiverHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ReceiverHandler",
	HandlerType: (*ReceiverHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReceiver",
			Handler:    _ReceiverHandler_CreateReceiver_Handler,
		},
		{
			MethodName: "GetReceiver",
			Handler:    _ReceiverHandler_GetReceiver_Handler,
		},
		{
			MethodName: "UpdateReceiver",
			Handler:    _ReceiverHandler_UpdateReceiver_Handler,
		},
		{
			MethodName: "DeleteReceiver",
			Handler:    _ReceiverHandler_DeleteReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receiver.proto",
}

func init() { proto.RegisterFile("receiver.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0xbf, 0x16, 0xca, 0x47, 0x6f, 0x69, 0x09, 0x43, 0x30, 0x03, 0x2e, 0x24, 0x5d, 0xe1,
	0x86, 0x45, 0x7d, 0x01, 0x14, 0x0c, 0xae, 0x31, 0x6e, 0x8c, 0x09, 0xe9, 0x9f, 0x1b, 0x21, 0x96,
	0xce, 0x64, 0x5a, 0xe5, 0x6d, 0xf4, 0x55, 0x4d, 0xa7, 0x9d, 0x0a, 0x34, 0x61, 0xa1, 0xbb, 0xe6,
	0xdc, 0x73, 0x4f, 0x7f, 0x3d, 0xb7, 0xe0, 0x08, 0x0c, 0x71, 0xfb, 0x81, 0x62, 0xca, 0x05, 0xcb,
	0x18, 0xd1, 0x79, 0x30, 0xb2, 0x50, 0x08, 0x56, 0x0a, 0xee, 0x97, 0x06, 0xf6, 0xaa, 0xf4, 0x2c,
	0x05, 0x7b, 0xe7, 0x64, 0x08, 0x3d, 0xb5, 0xb4, 0x7e, 0xcd, 0x95, 0xf5, 0x36, 0xa2, 0xda, 0x58,
	0x9b, 0x98, 0xe4, 0x12, 0xfa, 0x27, 0xa3, 0xc4, 0xdf, 0x21, 0xd5, 0xe5, 0xb0, 0x0b, 0xff, 0xf7,
	0x18, 0x6c, 0x18, 0x7b, 0xa3, 0x0d, 0x29, 0x5c, 0x80, 0x53, 0x0a, 0x6b, 0x4c, 0xfc, 0x20, 0x46,
	0xda, 0x1c, 0x6b, 0x93, 0x36, 0xe9, 0x40, 0x33, 0xc2, 0x34, 0xa4, 0x86, 0x74, 0x5d, 0x81, 0xa9,
	0x32, 0x53, 0xda, 0x1a, 0x37, 0x26, 0x96, 0xd7, 0x99, 0xf2, 0x60, 0xaa, 0xa0, 0xdc, 0x08, 0xda,
	0xea, 0x99, 0xf4, 0xc1, 0xaa, 0x00, 0x2a, 0xaa, 0x01, 0xd8, 0x95, 0x78, 0xc0, 0x63, 0x83, 0x81,
	0x3b, 0x7f, 0x1b, 0x97, 0x34, 0x36, 0x18, 0x7c, 0xc3, 0x92, 0x02, 0xc2, 0x24, 0x0e, 0xb4, 0xf6,
	0x18, 0x6e, 0xfc, 0xac, 0xc0, 0x70, 0xe7, 0xd0, 0x3b, 0xaa, 0xe1, 0x91, 0x63, 0x78, 0xae, 0x8a,
	0x13, 0x12, 0xf9, 0x4a, 0xf7, 0x05, 0x06, 0x47, 0x21, 0x2b, 0x4c, 0x39, 0x4b, 0x52, 0x24, 0xd7,
	0x3f, 0x87, 0x28, 0x82, 0x64, 0x8a, 0xe5, 0xf5, 0x0e, 0xbf, 0xb4, 0xa8, 0x9f, 0x82, 0x21, 0xef,
	0x23, 0x23, 0x2d, 0xcf, 0xcc, 0x1d, 0xf7, 0xb9, 0xe0, 0x7d, 0xea, 0xd0, 0x55, 0xde, 0x07, 0x3f,
	0x89, 0x62, 0x14, 0x64, 0x06, 0xce, 0x5c, 0xa0, 0x9f, 0x61, 0x55, 0x51, 0x3d, 0x72, 0x34, 0xac,
	0x49, 0x0a, 0xcc, 0xfd, 0x47, 0x6e, 0xc1, 0x5a, 0x62, 0x56, 0xad, 0x0f, 0x6a, 0xde, 0xbc, 0x89,
	0xf3, 0x11, 0x33, 0x70, 0x9e, 0x78, 0xf4, 0x17, 0x88, 0x05, 0x38, 0x0b, 0x8c, 0xf1, 0x20, 0xe1,
	0x17, 0x1c, 0x77, 0xcd, 0x67, 0x9d, 0x07, 0x41, 0x4b, 0xfe, 0xd8, 0x37, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x3e, 0x77, 0x3d, 0x0a, 0xfb, 0x02, 0x00, 0x00,
}
